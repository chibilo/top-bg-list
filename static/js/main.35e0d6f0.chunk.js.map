{"version":3,"sources":["Consts.js","requests.js","components/GameCard.js","components/GameList.js","components/CustomDropDown.js","components/CustomPagination.js","App.js","index.js"],"names":["Hosts","Tesera","title","linkIdField","makeLink","linkId","ratingField","sortField","BGG","makeLinks","info","Object","values","map","href","Card","Img","src","photo","alt","ImgOverlay","className","numRating","Badge","variant","gameRating","Body","style","zIndex","Title","Text","desc","links","link","idx","Link","as","target","id","isLoading","data","console","log","Alert","show","GameCard","value","items","onChange","val","onClick","e","text","pageCount","activePage","onChangePage","Pagination","Array","from","keys","num","Item","active","page","Number","window","scrollTo","top","behavior","App","useState","source","setSource","count","setCount","setActivePage","setPageCount","gameList","setGameList","setLoading","useEffect","host","sort","axios","get","then","res","teseraId","descriptionShort","photoUrl","fetchGameList","catch","error","Math","ceil","CustomDropDown","entries","GameList","slice","CustomPagination","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.35e0d6f0.chunk.js","sourcesContent":["export const Hosts = {\r\n  Tesera: {\r\n    title: \"Tesera\",\r\n    linkIdField: \"alias\",\r\n    makeLink: (linkId) => `https://tesera.ru/game/${linkId}`,\r\n    ratingField: \"ratingUser\",\r\n    sortField: \"-ratingn10\"\r\n  },\r\n  BGG: {\r\n    title: \"BoardGameGeek\",\r\n    linkIdField: \"bggId\",\r\n    makeLink: (linkId) => `https://www.boardgamegeek.com/boardgame/${linkId}`,\r\n    ratingField: \"bggGeekRating\",\r\n    sortField: \"-ratinggeekbgg\"\r\n  }\r\n};\r\n\r\nexport const GAME_REQUEST_URL = \"https://api.tesera.ru/games\";\r\n","import {GAME_REQUEST_URL, Hosts} from \"./Consts\";\r\nimport axios from \"axios\";\r\n\r\nconst makeLinks = (info) => {\r\n    return Object.values(Hosts).map(({ title, linkIdField, makeLink }) => {\r\n        return {\r\n            title: title,\r\n            href: makeLink(info[linkIdField])\r\n        };\r\n    });\r\n};\r\n\r\nconst fetchGameList = (host, count) => {\r\n    const sort = Hosts[host]?.sortField || \"-ratingn10\";\r\n    return axios\r\n        .get(`${GAME_REQUEST_URL}?offset=${0}&limit=${count}&WithAdditions=false&sort=${sort}`)\r\n        .then((res) => {\r\n            const ratingField = Hosts[host]?.ratingField || \"ratingUser\";\r\n            return res.data.map((info, idx) => {\r\n                return {\r\n                    id: info.teseraId,\r\n                    title: info.title,\r\n                    desc: info.descriptionShort,\r\n                    photo: info.photoUrl,\r\n                    numRating: idx + 1,\r\n                    gameRating: info[ratingField],\r\n                    links: makeLinks(info)\r\n                };\r\n            });\r\n        });\r\n}\r\n\r\nexport {\r\n    fetchGameList,\r\n}\r\n","import React from \"react\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\n\r\nexport default ({ info }) => (\r\n  <Card key={info.id}>\r\n    <Card.Img src={info.photo} alt=\"game image\"/>\r\n    <Card.ImgOverlay>\r\n      <div className=\"rating\">{info.numRating}</div>\r\n      <Badge className=\"pull-right\" variant=\"success\" title=\"rating\">\r\n        {info.gameRating}\r\n      </Badge>\r\n    </Card.ImgOverlay>\r\n    <Card.Body style={{ zIndex: 1000 }}>\r\n      <Card.Title>{info.title}</Card.Title>\r\n      <Card.Text>{info.desc}</Card.Text>\r\n      {info.links.map((link, idx) => (\r\n        <Card.Link key={idx} as=\"a\" href={link.href} target=\"_blank\">\r\n          {link.title}\r\n        </Card.Link>\r\n      ))}\r\n    </Card.Body>\r\n  </Card>\r\n);\r\n","import React from \"react\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport GameCard from \"./GameCard\";\r\n\r\nexport default ({ isLoading, data }) => {\r\n  console.log(data)\r\n  return (\r\n    <div className=\"game-list\">\r\n      <Alert className=\"alert\" show={isLoading} variant=\"info\">\r\n        Loading...\r\n      </Alert>\r\n      {data.map((info) => (\r\n        <GameCard info={info} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default ({ value, items, onChange }) => {\r\n  return (\r\n    <div className=\"custom-dropdown\">\r\n      {value}\r\n      <ul className=\"custom-dropdown-menu\">\r\n        {items.map((val, idx) => (\r\n          <li\r\n            key={idx}\r\n            onClick={(e) => {\r\n              onChange(val.value ?? val);\r\n            }}\r\n          >\r\n            {val.text ?? val}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import {Pagination} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nexport default ({pageCount, activePage, onChangePage}) => {\r\n    return (<Pagination>\r\n        {Array.from(Array(pageCount).keys()).map((num, idx) =>\r\n            (<Pagination.Item\r\n                key={idx}\r\n                active={activePage === (num + 1)}\r\n                onClick={e => {\r\n                    const page = Number(e.target.text || activePage);\r\n                    onChangePage(page);\r\n                    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n                }}>\r\n                {num + 1}\r\n            </Pagination.Item>))\r\n        }\r\n    </Pagination>);\r\n}\r\n","import React, {useEffect, useState} from \"react\";\nimport \"./styles.css\";\nimport { Hosts } from \"./Consts\";\nimport {fetchGameList} from \"./requests\";\nimport GameList from \"./components/GameList\";\nimport CustomDropDown from \"./components/CustomDropDown\";\nimport CustomPagination from \"./components/CustomPagination\";\n\nexport default function App() {\n  const CARD_PER_PAGE = 10;\n  const [source, setSource] = useState(\"BGG\");\n  const [count, setCount] = useState(10);\n  const [activePage, setActivePage] = useState(1);\n  const [pageCount, setPageCount] = useState(1);\n  const [gameList, setGameList] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n    }, [gameList])\n\n  useEffect(() => {\n      setLoading(true);\n      fetchGameList(source, count).then(setGameList).catch(console.error);\n  }, [source, count])\n\n  useEffect(() => {\n      setPageCount(Math.ceil(count / CARD_PER_PAGE));\n      setActivePage(1)\n  }, [count])\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Топ{\" \"}\n        <CustomDropDown\n          value={count}\n          items={[10, 25, 50, 100]}\n          onChange={setCount}\n        />{\" \"}\n        Настольных Игр по версии{\" \"}\n        <CustomDropDown\n          value={Hosts[source].title}\n          items={Object.entries(Hosts).map((host) => ({\n            value: host[0],\n            text: host[1].title\n          }))}\n          onChange={setSource}\n        />\n      </h1>\n      <GameList\n          isLoading={isLoading}\n            data={gameList.slice((activePage - 1) * CARD_PER_PAGE, activePage * CARD_PER_PAGE)}\n      />\n        {(count > CARD_PER_PAGE) &&\n        <CustomPagination\n            pageCount={pageCount}\n            onChangePage={setActivePage}\n            activePage={activePage}\n        />\n        }\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}